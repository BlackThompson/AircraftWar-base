@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # int locationX
    # int locationY
    # int speedX
    # int speedY
    # BufferedImage image
    # int width
    # int height
    # boolean isValid

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY):void
    + forward():void
    + crash(AbstractFlyingObject AbstractFlyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# int maxHp
    # int hp
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp):void
    + decreaseHp(int decrease):void
    + increaseHp(int increase):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
}

interface PropFactory
{
    + public createProp(int locationX, int locationY, int speedX, int speedY):AbstractProp
}

interface AircraftFactory
{
    + public createAircraft(int locationX, int locationY, int speedX, int speedY, int hp):AbstractAircraft
}

class BaseBullet
{
    - int power
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

abstract class AbstractProp
{
    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
}

PropFactory <|.. BloodFactory
PropFactory <|.. BombFactory
PropFactory <|.. BulletFactory

BloodFactory ..> Blood:create
BulletFactory ..> Bullet:create
BombFactory ..> Bomb:create

AircraftFactory <|.. BossFactory
AircraftFactory <|.. EliteFactory
AircraftFactory <|.. MobFactory

BossFactory ..> Boss:create
EliteFactory ..> EliteEnemy:create
MobFactory ..> MobEnemy:create

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- AbstractProp

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- MobEnemy
AbstractAircraft <|-- EliteEnemy
AbstractAircraft <|-- Boss

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

AbstractProp <|-- Blood
AbstractProp <|-- Bomb
AbstractProp <|-- Bullet

class HeroAircraft
{
    - int shootNum
    - int power
    - int direction
    - HeroAircraft heroInstance

    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + getHeroInstance(int locationX, int locationY, int speedX, int speedY, int hp):HeroAircraft
    + forward():void
    + shoot():List<BaseBullet>
}

HeroAircraft <-- HeroAircraft:instance

class Boss {
    + Boss(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<BaseBullet>
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

class BossFactory{
    + createAircraft(int locationX, int locationY, int speedX, int speedY, int hp):Boss
}

class EliteFactory{
    + createAircraft(int locationX, int locationY, int speedX, int speedY, int hp):EliteEnemy
}

class MobFactory{
    + createAircraft(int locationX, int locationY, int speedX, int speedY, int hp):MobEnemy
}


class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class Blood{
    - int blood
    + public Blood(int locationX, int locationY, int speedX, int speedY)
    + public getBlood():int
}

class Bullet{
    + public Bullet(int locationX, int locationY, int speedX, int speedY)
}

class Bomb{
    + public Bomb(int locationX, int locationY, int speedX, int speedY)
}

class BloodFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY ):Blood
}

class BombFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY):Bomb
}

class BulletFactory
{
    + createProp(int locationX, int locationY, int speedX, int speedY):Bullet
}


@enduml